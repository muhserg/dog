Задача.

Дан ООП часть кода, который описывает бизнес-логику загрузки в некую базу данных о собаках. 
Не имеет значения куда и откуда. 

Поставляется список собак с их свойствами: порода, цвет, картинка, имя, имя собственника, возраст. 
Сам ООП написан с избытком.


Требуется:

1) почистить ООП код, оставить только непосредственный код для данного процесса
2) определить паттерны проектирования, которые здесь использованы
3) ответить на вопрос - зачем и почему их здесь применили и нужны ли они вообще (последнее будет исходить от вашей чистки кода)
4) добавить клиентский код. На вход построить загрузку данных из CSV  файла.
5) По ходу ООП реализовать функции profile() и findDog(). Ограничений в количестве клиентского кода нет (зависит от вашего времени)
6) запустить код 
7) нарисовать UML-диаграмму

Исходная кодовая база: файл model2.php

===============================================================================================================


Решение:

1) Разместил структуру приложения в папке protected.
   Удалил классы DogGroup и Group, поскольку, на мой взгляд, группировка по породам собак в рамках данной задачи не нужна.
   Свойства класса DogGroup, а также методы findDog и profile перенесены в класс Dog.
   Класс Dog становится сервисом для свойств собаки.
   Для взаимодействия с СУБД созданы классы DocModel и OwnerModel.
   Для обработки обращений клиентской части создан контроллер DogController.
   В Dog добавил метод saveToDb() для сохранения в БД.
   Убрал конструктор и свойство dogs из DocArray.

2) Метод newDog($name, $age, $owner, $group) реализует паттерн простой фабрики.
   Классы DogArray и Dog реализуют паттерн "репозиторий".
   Использован паттерн DependencyInjection.

3) Паттерн простой фабрики применен для генерации новых свойств собаки,
   паттерн "репозиторий" применен для сохранения свойств собаки.
   DependencyInjection необходим для передачи свойств классу Dog.

4) Добавил PHPDoc-блоки для документирования программного кода.
   Клиентский код частично реализован в папке views проекта.

5) findDog() реализовал.
   Отображение данных собаки profile() логично перенести в шаблоны отображения (папка views проекта).
   Функционал render() также перенес в profileAction($dogId) контроллера DogController.

6) По согласованию с Евгением, решено не выкладывать приложение на хостинг, а разместить его в github.

7) UML диаграмма сгенерирована с помощью phpuml и добавлена в корень приложения (uml.xmi).
Просмотреть файл можно с помощью программы Visual Paradigm.


Примечание:

При дальнейшей разработке, необходимо добавить composer (для библиотек php) и wеbpack или gulp для сборки js и css.
А для обращения к СУБД использовать ORM и миграции.
Для расширения возможностей приложения желательно использовать php фрэймворк.
Если данных будет много, желательно использовать sphinx или ElasticSearch для поиска и memcache или Redis для кеширования
отображения свойств собаки. При добавлении новых данных, ключи нужно будет обновлять.
Если число свойств собаки сильно расширится, можно сделать нормализацию, создав таблицы dog_property и dog_property_type.

P. S.

Уделил бы Вашему заданию больше времени, но необходимо заняться другими тестовыми заданиями.